import * as React from 'react';
import { Arguments, Props as PropsForComponent, MaybeFunctionReturnType as ReturnType } from '@shopify/useful-types';
import { Element, Predicate } from './element';
import { FunctionKeys } from './types';
declare type ResolveRoot = (element: Element<unknown>) => Element<unknown> | null;
export declare const connected: Set<Root<unknown>>;
export declare class Root<Props> {
    private tree;
    private resolveRoot;
    readonly props: Props;
    readonly isDOM: boolean;
    readonly type: string | React.ComponentClass<any, any> | React.FunctionComponent<any> | null;
    readonly instance: any;
    readonly children: Element<unknown>[];
    readonly descendants: Element<unknown>[];
    readonly domNodes: HTMLElement[];
    readonly domNode: HTMLElement | null;
    private wrapper;
    private element;
    private root;
    private acting;
    private readonly mounted;
    constructor(tree: React.ReactElement<Props>, resolveRoot?: ResolveRoot);
    act<T>(action: () => T, { update }?: {
        update?: boolean | undefined;
    }): T;
    html(): string;
    text(): string;
    is<Type extends React.ComponentType<any> | string>(type: Type): this is Root<PropsForComponent<Type>>;
    prop<K extends keyof Props>(key: K): Props[K];
    find<Type extends React.ComponentType<any> | string>(type: Type, props?: Partial<PropsForComponent<Type>>): Element<PropsForComponent<Type>> | null;
    findAll<Type extends React.ComponentType<any> | string>(type: Type, props?: Partial<PropsForComponent<Type>>): Element<PropsForComponent<Type>>[];
    findWhere(predicate: Predicate): Element<unknown> | null;
    findAllWhere(predicate: Predicate): Element<unknown>[];
    trigger<K extends FunctionKeys<Props>>(prop: K, ...args: Arguments<Props[K]>): ReturnType<NonNullable<Props[K]>>;
    triggerKeypath<T = unknown>(keypath: string, ...args: unknown[]): T;
    mount(): void;
    unmount(): void;
    destroy(): void;
    setProps(props: Partial<Props>): void;
    forceUpdate(): void;
    toString(): string;
    private update;
    private ensureRoot;
    private withRoot;
}
export {};
